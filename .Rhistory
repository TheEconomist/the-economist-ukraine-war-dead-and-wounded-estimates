title = paste0("Predicted ", gtitle, ": mean ±95% CI (darker) and 95% PI (lighter)"),
y = gtitle, x = "Date"
) + theme_minimal()
print(p1)
# Smooth 7-day
cols_to_smooth <- c('fit','ci_lower','ci_upper','pi_low','pi_high',
'daily_rate_estimate','daily_rate_ci_lower','daily_rate_ci_upper','daily_rate_pi_lower','daily_rate_pi_upper')
predictions[cols_to_smooth] <- lapply(predictions[cols_to_smooth], function(x)
rollapply(x, width = 7, FUN = function(z) mean(z, na.rm = TRUE), fill = NA, align = 'right', partial = TRUE)
)
# Monotonic for cumulative only
cum_cols <- c('fit','ci_lower','ci_upper','pi_low','pi_high')
predictions[cum_cols] <- lapply(predictions[cum_cols], cummax)
# Plot again
p2 <- ggplot(predictions, aes(x = date)) +
geom_ribbon(aes(ymin = pi_low, ymax = pi_high), alpha = 0.2) +
geom_ribbon(aes(ymin = ci_lower, ymax = ci_upper), fill = "steelblue", alpha = 0.3) +
geom_line(aes(y = fit), color = "steelblue", size = 1) +
geom_point(data = estimate_df, aes(x = date, y = estimate)) +
labs(
title = paste0("Predicted ", gtitle, ": mean ±95% CI (darker) and 95% PI (lighter)"),
y = gtitle, x = "Date"
) + theme_minimal()
print(p2)
# Return results
predictions %>%
rename(estimate = fit) %>%
select(-fit_link, -se_link, -mu, -var_y, -se_pi_link, -deta, -se_deta, -var_rate)
}
# Casualties:
gam_casualties <- generate_gam_prediction(estimate_df = casualties_cumulative, gtitle="Casualties") %>%
mutate(type = 'casualties',
country = 'russia')
estimate_df = casualties_cumulative
pred_df = covars_cumulative
gtitle = "Casualties"
gam_formula = estimate ~
# baseline trend using days since invasion
s(days_since_invasion, k = 10) +
days_since_invasion +
# war-fires and visibility
te(total_daily_log_war_fires_to_date,
total_cloud_cover_in_east_of_country_to_date, k = c(3, 3)) +
te(total_daily_log_war_fires_to_date_in_ukraine_held_area,
total_cloud_cover_in_east_of_country_to_date, k = c(3, 3)) +
te(total_daily_log_war_fires_to_date_in_russia_held_area,
total_cloud_cover_in_east_of_country_to_date, k = c(3, 3)) +
# change in territory over time
s(total_change_in_area_assessed_as_russia_controlled, k = 3)
library(mgcv)
library(gratia)
library(zoo)
# Fit GAM
gam_model <- gam(
formula = gam_formula,
data    = estimate_df,
weights = weight,
family  = tw(link = "log"),
method  = "REML",
select  = TRUE
)
# Predict on link scale
preds_link <- predict(
gam_model,
newdata = pred_df,
type    = "link",
se.fit  = TRUE
)
# Build base predictions dataframe
predictions <- pred_df %>%
mutate(
fit_link = preds_link$fit,
se_link  = preds_link$se.fit,
fit      = exp(fit_link),
ci_lower = exp(fit_link - 1.96 * se_link),
ci_upper = exp(fit_link + 1.96 * se_link)
)
# Tweedie params and variance
phi <- summary(gam_model)$dispersion
p   <- gam_model$family$getTheta(TRUE)
predictions <- predictions %>%
mutate(
mu    = fit,
var_y = phi * mu^p,
se_pi_link = sqrt(se_link^2 + (var_y / mu^2)),
pi_low  = exp(fit_link - 1.96 * se_pi_link),
pi_high = exp(fit_link + 1.96 * se_pi_link)
)
# Derivative for daily rate
derivs <- derivatives(
gam_model,
newdata = pred_df,
select  = "s(days_since_invasion)",
interval = "confidence"
)
predictions <- predictions %>%
mutate(
deta               = derivs$derivative,
se_deta            = derivs$se,
daily_rate_estimate = mu * deta,
daily_rate_ci_lower = mu * (deta - 1.96 * se_deta),
daily_rate_ci_upper = mu * (deta + 1.96 * se_deta),
var_rate = (deta^2 * mu^2 * se_link^2) + (mu^2 * se_deta^2) + (phi * (mu * deta)^p),
daily_rate_pi_lower = daily_rate_estimate - 1.96 * sqrt(var_rate),
daily_rate_pi_upper = daily_rate_estimate + 1.96 * sqrt(var_rate)
)
derivs$derivative
derivs
# 5. Generate GAM prediction for both casualties and deaths based on day of the war alone. We will model the residuals of this using our covariates. This is important because in this way can project forward in time rigorously  ---------------------------------------
generate_gam_prediction <- function(estimate_df = casualties_cumulative,
pred_df = covars_cumulative,
gtitle = "Casualties",
gam_formula = estimate ~
# baseline trend using days since invasion
s(days_since_invasion, k = 10) +
days_since_invasion +
# war-fires and visibility
te(total_daily_log_war_fires_to_date,
total_cloud_cover_in_east_of_country_to_date, k = c(3, 3)) +
te(total_daily_log_war_fires_to_date_in_ukraine_held_area,
total_cloud_cover_in_east_of_country_to_date, k = c(3, 3)) +
te(total_daily_log_war_fires_to_date_in_russia_held_area,
total_cloud_cover_in_east_of_country_to_date, k = c(3, 3)) +
# change in territory over time
s(total_change_in_area_assessed_as_russia_controlled, k = 3)) {
library(mgcv)
library(gratia)
library(zoo)
# Fit GAM
gam_model <- gam(
formula = gam_formula,
data    = estimate_df,
weights = weight,
family  = tw(link = "log"),
method  = "REML",
select  = TRUE
)
# Predict on link scale
preds_link <- predict(
gam_model,
newdata = pred_df,
type    = "link",
se.fit  = TRUE
)
# Build base predictions dataframe
predictions <- pred_df %>%
mutate(
fit_link = preds_link$fit,
se_link  = preds_link$se.fit,
fit      = exp(fit_link),
ci_lower = exp(fit_link - 1.96 * se_link),
ci_upper = exp(fit_link + 1.96 * se_link)
)
# Tweedie params and variance
phi <- summary(gam_model)$dispersion
p   <- gam_model$family$getTheta(TRUE)
predictions <- predictions %>%
mutate(
mu        = fit,
var_y     = phi * mu^p,
se_pi_link = sqrt(se_link^2 + (var_y / mu^2)),
pi_lower  = exp(fit_link - 1.96 * se_pi_link),
pi_upper  = exp(fit_link + 1.96 * se_pi_link)
)
# Derivative for daily rate
derivs <- derivatives(
gam_model,
newdata = pred_df,
select  = "s(days_since_invasion)",
interval = "confidence"
)
# Compute daily rate and intervals using correct derivs column names
predictions <- predictions %>%
mutate(
deta                = derivs$.derivative,
se_deta             = derivs$.se,
daily_rate_estimate = mu * deta,
# CI on derivative
daily_rate_ci_lower = mu * derivs$.lower_ci,
daily_rate_ci_upper = mu * derivs$.upper_ci,
# delta-method variance including residual error
var_rate            = (deta^2 * mu^2 * se_link^2) +
(mu^2 * se_deta^2) +
(phi * (mu * deta)^p),
daily_rate_pi_lower = daily_rate_estimate - 1.96 * sqrt(var_rate),
daily_rate_pi_upper = daily_rate_estimate + 1.96 * sqrt(var_rate)
)
# Plot cumulative predictions
p1 <- ggplot(predictions, aes(x = date)) +
geom_ribbon(aes(ymin = pi_lower, ymax = pi_upper), alpha = 0.2) +
geom_ribbon(aes(ymin = ci_lower, ymax = ci_upper), fill = "steelblue", alpha = 0.3) +
geom_line(aes(y = fit), color = "steelblue", size = 1) +
geom_point(data = estimate_df, aes(x = date, y = estimate)) +
labs(
title = paste0("Predicted ", gtitle, ": mean ±95% CI (darker) and 95% PI (lighter)"),
y = gtitle, x = "Date"
) + theme_minimal()
print(p1)
# Smooth 7-day rolling average
cols_to_smooth <- c('fit','ci_lower','ci_upper','pi_lower','pi_upper',
'daily_rate_estimate','daily_rate_ci_lower','daily_rate_ci_upper','daily_rate_pi_lower','daily_rate_pi_upper')
predictions[cols_to_smooth] <- lapply(predictions[cols_to_smooth], function(x)
rollapply(x, width = 7, FUN = function(z) mean(z, na.rm = TRUE), fill = NA, align = 'right', partial = TRUE)
)
# Monotonic only for cumulative
cum_cols <- c('fit','ci_lower','ci_upper','pi_lower','pi_upper')
predictions[cum_cols] <- lapply(predictions[cum_cols], cummax)
# Plot again
p2 <- ggplot(predictions, aes(x = date)) +
geom_ribbon(aes(ymin = pi_lower, ymax = pi_upper), alpha = 0.2) +
geom_ribbon(aes(ymin = ci_lower, ymax = ci_upper), fill = "steelblue", alpha = 0.3) +
geom_line(aes(y = fit), color = "steelblue", size = 1) +
geom_point(data = estimate_df, aes(x = date, y = estimate)) +
labs(
title = paste0("Predicted ", gtitle, ": mean ±95% CI (darker) and 95% PI (lighter)"),
y = gtitle, x = "Date"
) + theme_minimal()
print(p2)
# Return final predictions
predictions %>%
rename(estimate = fit) %>%
select(-fit_link, -se_link, -mu, -var_y, -se_pi_link, -deta, -se_deta, -var_rate)
}
# Casualties:
gam_casualties <- generate_gam_prediction(estimate_df = casualties_cumulative, gtitle="Casualties") %>%
mutate(type = 'casualties',
country = 'russia')
head(gam_casualties)
ggplot(gam_casualties, aes(x = date)) +
geom_ribbon(aes(ymin = daily_rate_pi_lower, ymax = daily_rate_pi_upper), alpha = 0.2) +
geom_ribbon(aes(ymin = daily_rate_ci_lower, ymax = daily_rate_ci_upper), fill = "steelblue", alpha = 0.3) +
geom_line(aes(y = daily_rate_estimate), color = "steelblue", size = 1)  +
labs(
title = paste0("Predicted ", gtitle, ": mean ±95% CI (darker) and 95% PI (lighter)"),
y = gtitle, x = "Date"
) + theme_minimal()
View(gam_casualties)
# 5. Generate GAM prediction for both casualties and deaths based on day of the war alone. We will model the residuals of this using our covariates. This is important because in this way can project forward in time rigorously  ---------------------------------------
generate_gam_prediction <- function(estimate_df = casualties_cumulative,
pred_df = covars_cumulative,
gtitle = "Casualties",
gam_formula = estimate ~
# baseline trend using days since invasion
s(days_since_invasion, k = 10) +
days_since_invasion +
# war-fires and visibility
te(total_daily_log_war_fires_to_date,
total_cloud_cover_in_east_of_country_to_date, k = c(3, 3)) +
te(total_daily_log_war_fires_to_date_in_ukraine_held_area,
total_cloud_cover_in_east_of_country_to_date, k = c(3, 3)) +
te(total_daily_log_war_fires_to_date_in_russia_held_area,
total_cloud_cover_in_east_of_country_to_date, k = c(3, 3)) +
# change in territory over time
s(total_change_in_area_assessed_as_russia_controlled, k = 3)) {
library(mgcv)
library(gratia)
library(zoo)
# Fit GAM
gam_model <- gam(
formula = gam_formula,
data    = estimate_df,
weights = weight,
family  = tw(link = "log"),
method  = "REML",
select  = TRUE
)
# Predict on link scale
preds_link <- predict(
gam_model,
newdata = pred_df,
type    = "link",
se.fit  = TRUE
)
# Build base predictions dataframe
predictions <- pred_df %>%
mutate(
fit_link = preds_link$fit,
se_link  = preds_link$se.fit,
fit      = exp(fit_link),
ci_lower = exp(fit_link - 1.96 * se_link),
ci_upper = exp(fit_link + 1.96 * se_link)
)
# Tweedie params and variance for cumulative PI
phi <- summary(gam_model)$dispersion
p   <- gam_model$family$getTheta(TRUE)
predictions <- predictions %>%
mutate(
mu         = fit,
var_y      = phi * mu^p,
se_pi_link = sqrt(se_link^2 + (var_y / mu^2)),
pi_lower   = exp(fit_link - 1.96 * se_pi_link),
pi_upper   = exp(fit_link + 1.96 * se_pi_link)
)
# Derivatives for smooth term
derivs <- derivatives(
gam_model,
newdata = pred_df,
select  = "s(days_since_invasion)",
interval = "confidence"
)
# Extract linear term slope for days_since_invasion
beta1 <- coef(gam_model)["days_since_invasion"]
# variance of beta1
var_beta1 <- vcov(gam_model)["days_since_invasion","days_since_invasion"]
# Compute total derivative and its SE
predictions <- predictions %>%
mutate(
smooth_deta    = derivs$.derivative,
se_smooth_deta = derivs$.se,
# total derivative on link scale = smooth + linear
total_deta     = smooth_deta + beta1,
# approximate SE of total derivative (assuming independence)
se_total_deta  = sqrt(se_smooth_deta^2 + var_beta1),
# daily rate estimates and CIs
daily_rate_estimate = mu * total_deta,
daily_rate_ci_lower = mu * (total_deta - 1.96 * se_total_deta),
daily_rate_ci_upper = mu * (total_deta + 1.96 * se_total_deta),
# delta-method variance including residual error for PI
var_rate = (total_deta^2 * mu^2 * se_link^2) +
(mu^2 * se_total_deta^2) +
(phi * (mu * total_deta)^p),
daily_rate_pi_lower = daily_rate_estimate - 1.96 * sqrt(var_rate),
daily_rate_pi_upper = daily_rate_estimate + 1.96 * sqrt(var_rate)
)
# Plot cumulative predictions
p1 <- ggplot(predictions, aes(x = date)) +
geom_ribbon(aes(ymin = pi_lower, ymax = pi_upper), alpha = 0.2) +
geom_ribbon(aes(ymin = ci_lower, ymax = ci_upper), fill = "steelblue", alpha = 0.3) +
geom_line(aes(y = fit), color = "steelblue", size = 1) +
geom_point(data = estimate_df, aes(x = date, y = estimate)) +
labs(
title = paste0("Predicted ", gtitle, ": mean ±95% CI (darker) and 95% PI (lighter)"),
y = gtitle, x = "Date"
) + theme_minimal()
print(p1)
# Smooth 7-day rolling average
cols_smooth <- c('fit','ci_lower','ci_upper','pi_lower','pi_upper',
'daily_rate_estimate','daily_rate_ci_lower','daily_rate_ci_upper','daily_rate_pi_lower','daily_rate_pi_upper')
predictions[cols_smooth] <- lapply(predictions[cols_smooth], function(x)
rollapply(x, width = 7, FUN = function(z) mean(z, na.rm = TRUE), fill = NA, align = 'right', partial = TRUE)
)
# Monotonic only for cumulative
cum_cols <- c('fit','ci_lower','ci_upper','pi_lower','pi_upper')
predictions[cum_cols] <- lapply(predictions[cum_cols], cummax)
# Plot again
p2 <- ggplot(predictions, aes(x = date)) +
geom_ribbon(aes(ymin = pi_lower, ymax = pi_upper), alpha = 0.2) +
geom_ribbon(aes(ymin = ci_lower, ymax = ci_upper), fill = "steelblue", alpha = 0.3) +
geom_line(aes(y = fit), color = "steelblue", size = 1) +
geom_point(data = estimate_df, aes(x = date, y = estimate)) +
labs(
title = paste0("Predicted ", gtitle, ": mean ±95% CI (darker) and 95% PI (lighter)"),
y = gtitle, x = "Date"
) + theme_minimal()
print(p2)
# Return final predictions
predictions %>%
rename(estimate = fit) %>%
select(-fit_link, -se_link, -mu, -var_y, -se_pi_link,
-smooth_deta, -se_smooth_deta, -total_deta, -se_total_deta, -var_rate)
}
# Casualties:
gam_casualties <- generate_gam_prediction(estimate_df = casualties_cumulative, gtitle="Casualties") %>%
mutate(type = 'casualties',
country = 'russia')
ggplot(gam_casualties, aes(x = date)) +
geom_ribbon(aes(ymin = daily_rate_pi_lower, ymax = daily_rate_pi_upper), alpha = 0.2) +
geom_ribbon(aes(ymin = daily_rate_ci_lower, ymax = daily_rate_ci_upper), fill = "steelblue", alpha = 0.3) +
geom_line(aes(y = daily_rate_estimate), color = "steelblue", size = 1)  +
labs(
title = paste0("Predicted ", gtitle, ": mean ±95% CI (darker) and 95% PI (lighter)"),
y = gtitle, x = "Date"
) + theme_minimal()
# 5. Generate GAM prediction for both casualties and deaths based on day of the war alone. We will model the residuals of this using our covariates. This is important because in this way can project forward in time rigorously  ---------------------------------------
generate_gam_prediction <- function(estimate_df = casualties_cumulative,
pred_df = covars_cumulative,
gtitle = "Casualties",
gam_formula = estimate ~
# baseline trend using days since invasion
s(days_since_invasion, k = 10) +
days_since_invasion +
# war-fires and visibility
te(total_daily_log_war_fires_to_date,
total_cloud_cover_in_east_of_country_to_date, k = c(3, 3)) +
te(total_daily_log_war_fires_to_date_in_ukraine_held_area,
total_cloud_cover_in_east_of_country_to_date, k = c(3, 3)) +
te(total_daily_log_war_fires_to_date_in_russia_held_area,
total_cloud_cover_in_east_of_country_to_date, k = c(3, 3)) +
# change in territory over time
s(total_change_in_area_assessed_as_russia_controlled, k = 3)) {
library(mgcv)
library(gratia)
library(zoo)
# Fit GAM
gam_model <- gam(
formula = gam_formula,
data    = estimate_df,
weights = weight,
family  = tw(link = "log"),
method  = "REML",
select  = TRUE
)
# Predict on link scale
preds_link <- predict(
gam_model,
newdata = pred_df,
type    = "link",
se.fit  = TRUE
)
# Build base predictions dataframe
predictions <- pred_df %>%
mutate(
fit_link = preds_link$fit,
se_link  = preds_link$se.fit,
fit      = exp(fit_link),
ci_lower = exp(fit_link - 1.96 * se_link),
ci_upper = exp(fit_link + 1.96 * se_link)
)
# Tweedie params and variance for cumulative PI
phi <- summary(gam_model)$dispersion
p   <- gam_model$family$getTheta(TRUE)
predictions <- predictions %>%
mutate(
mu         = fit,
var_y      = phi * mu^p,
se_pi_link = sqrt(se_link^2 + (var_y / mu^2)),
pi_lower   = exp(fit_link - 1.96 * se_pi_link),
pi_upper   = exp(fit_link + 1.96 * se_pi_link)
)
# Derivatives for smooth term
derivs <- derivatives(
gam_model,
newdata = pred_df,
select  = "s(days_since_invasion)",
interval = "confidence"
)
# Extract linear term slope for days_since_invasion
beta1 <- coef(gam_model)["days_since_invasion"]
# variance of beta1
var_beta1 <- vcov(gam_model)["days_since_invasion","days_since_invasion"]
# Compute total derivative and its SE
predictions <- predictions %>%
mutate(
smooth_deta    = derivs$.derivative,
se_smooth_deta = derivs$.se,
# total derivative on link scale = smooth + linear
total_deta     = smooth_deta + beta1,
# approximate SE of total derivative (assuming independence)
se_total_deta  = sqrt(se_smooth_deta^2 + var_beta1),
# daily rate estimate
daily_rate_estimate = mu * total_deta,
# confidence interval for daily rate via delta method
var_conf         = (mu^2 * se_total_deta^2) + (deta^2 * mu^2 * se_link^2),
se_conf          = sqrt(var_conf),
daily_rate_ci_lower = daily_rate_estimate - 1.96 * se_conf,
daily_rate_ci_upper = daily_rate_estimate + 1.96 * se_conf,
# delta-method variance including residual error for PI
var_rate         = (total_deta^2 * mu^2 * se_link^2) +
(mu^2 * se_total_deta^2) +
(phi * (mu * total_deta)^p),
daily_rate_pi_lower = daily_rate_estimate - 1.96 * sqrt(var_rate),
daily_rate_pi_upper = daily_rate_estimate + 1.96 * sqrt(var_rate)
)
# Plot cumulative predictions
p1 <- ggplot(predictions, aes(x = date)) +
geom_ribbon(aes(ymin = pi_lower, ymax = pi_upper), alpha = 0.2) +
geom_ribbon(aes(ymin = ci_lower, ymax = ci_upper), fill = "steelblue", alpha = 0.3) +
geom_line(aes(y = fit), color = "steelblue", size = 1) +
geom_point(data = estimate_df, aes(x = date, y = estimate)) +
labs(
title = paste0("Predicted ", gtitle, ": mean ±95% CI (darker) and 95% PI (lighter)"),
y = gtitle, x = "Date"
) + theme_minimal()
print(p1)
# Smooth 7-day rolling average
cols_smooth <- c('fit','ci_lower','ci_upper','pi_lower','pi_upper',
'daily_rate_estimate','daily_rate_ci_lower','daily_rate_ci_upper','daily_rate_pi_lower','daily_rate_pi_upper')
predictions[cols_smooth] <- lapply(predictions[cols_smooth], function(x)
rollapply(x, width = 7, FUN = function(z) mean(z, na.rm = TRUE), fill = NA, align = 'right', partial = TRUE)
)
# Monotonic only for cumulative
cum_cols <- c('fit','ci_lower','ci_upper','pi_lower','pi_upper')
predictions[cum_cols] <- lapply(predictions[cum_cols], cummax)
# Plot again
p2 <- ggplot(predictions, aes(x = date)) +
geom_ribbon(aes(ymin = pi_lower, ymax = pi_upper), alpha = 0.2) +
geom_ribbon(aes(ymin = ci_lower, ymax = ci_upper), fill = "steelblue", alpha = 0.3) +
geom_line(aes(y = fit), color = "steelblue", size = 1) +
geom_point(data = estimate_df, aes(x = date, y = estimate)) +
labs(
title = paste0("Predicted ", gtitle, ": mean ±95% CI (darker) and 95% PI (lighter)"),
y = gtitle, x = "Date"
) + theme_minimal()
print(p2)
# Return final predictions
predictions %>%
rename(estimate = fit) %>%
select(-fit_link, -se_link, -mu, -var_y, -se_pi_link,
-smooth_deta, -se_smooth_deta, -total_deta, -se_total_deta, -var_rate)
}
# Casualties:
gam_casualties <- generate_gam_prediction(estimate_df = casualties_cumulative, gtitle="Casualties") %>%
mutate(type = 'casualties',
country = 'russia')
ggplot(gam_casualties, aes(x = date)) +
geom_ribbon(aes(ymin = daily_rate_pi_lower, ymax = daily_rate_pi_upper), alpha = 0.2) +
geom_ribbon(aes(ymin = daily_rate_ci_lower, ymax = daily_rate_ci_upper), fill = "steelblue", alpha = 0.3) +
geom_line(aes(y = daily_rate_estimate), color = "steelblue", size = 1)  +
labs(
title = paste0("Predicted ", gtitle, ": mean ±95% CI (darker) and 95% PI (lighter)"),
y = gtitle, x = "Date"
) + theme_minimal()
